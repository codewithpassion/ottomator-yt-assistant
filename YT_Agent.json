{
  "name": "YT-Agent",
  "nodes": [
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ {\n\"type\": \"human\",\n\"content\": $json.query,\n\"additional_kwargs\": {},\n\"response_metadata\": {}\n} }}"
            }
          ]
        }
      },
      "id": "708f6008-9b3f-46b1-8003-e638c989d979",
      "name": "Add User Message to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -180,
        1060
      ],
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Add User Message to DB').isExecuted && $('Add User Message to DB').last().json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ {\n\"type\": \"ai\",\n\"content\": $json.data,\n\"data\": $json.data,\n\"additional_kwargs\": {},\n\"response_metadata\": {}\n} }}"
            }
          ]
        }
      },
      "id": "390e219f-ea4e-40f3-b03a-2fe3eb37d61e",
      "name": "Add AI Message to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3680,
        1600
      ],
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ee2bcd57-3b4c-43f9-b4b7-3a25687b9a68",
              "name": "query",
              "value": "={{ $json.body.query }}",
              "type": "string"
            },
            {
              "id": "63f23e51-af2b-47c4-a288-5abaf9b6c357",
              "name": "user_id",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "b97a3670-8a87-481b-8695-db44624be7d8",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "7d3fa06d-08f7-4517-b9c5-3c46ff476f55",
              "name": "session_id",
              "value": "={{ $json.body.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0105b031-e5fa-44f8-bd34-5a8c127d29e7",
      "name": "Prep Input Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -440,
        1260
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b5eaa2a2-a6bc-40ab-af5e-baa8a5dda1a7",
              "name": "success",
              "value": "=true",
              "type": "boolean"
            },
            {
              "id": "17e06634-66c7-41d2-8324-2d2c72da762b",
              "name": "message.content",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e1648795-1728-46f2-ad45-8b04b28677eb",
      "name": "Prep Output Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3980,
        1600
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9a6c4630-b422-4d42-b894-81ecfe881ffe",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "c704dcae-0f2f-4fbb-b85e-55bcaadaedef",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -680,
        1260
      ],
      "webhookId": "9a6c4630-b422-4d42-b894-81ecfe881ffe",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pRjHzcrlEkodXNSC",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.content }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a classifier for a YouTube video interaction system. Your role is to analyze user input and classify it into structured actions related to YouTube videos. You must respond ONLY with a JSON object representing the classified action.\n\nOutput Format:\n{\n    \"action_type\": \"add|summarize|search|respond\",\n    \"video_url\": \"<url or null>\",\n    \"video_title\": \"<title or null>\",\n    \"search_query\": \"<search terms or null>\",\n    \"confidence\": <0.0-1.0>,\n    \"response\": \"response\"\n}\n\nRules:\n- If a user provides a YouTube URL alone, classify it as an \"add\" action\n- If a user asks about video content with a URL or title, classify it as a \"summarize\" action\n- If a user asks to find specific information from past videos, classify it as a \"search\" action\n- Include the confidence score based on how clearly the user's intent matches the classification\n- Only include non-null values for relevant fields\n- If you can respond directly, answer with a action_type of 'respond' and set the \"response\" property. IT IS IMPORTANT THAT YOU RETURN A RESPONSE FOR THE USER IN THIS CASE!\n\nExamples:\n\n1. User Input: \"https://youtube.com/watch?v=12345\"\nOutput:\n{\n    \"action_type\": \"add\",\n    \"video_url\": \"https://youtube.com/watch?v=12345\",\n    \"confidence\": 1.0\n}\n\n2. User Input: \"Can you please add this video https://youtube.com/watch?v=67890\"\nOutput:\n{\n    \"action_type\": \"add\",\n    \"video_url\": \"https://youtube.com/watch?v=67890\",\n    \"confidence\": 1.0\n}\n\n3. User Input: \"Can you summarize this video for me: https://youtube.com/watch?v=24680\"\nOutput:\n{\n    \"action_type\": \"summarize\",\n    \"video_url\": \"https://youtube.com/watch?v=24680\",\n    \"confidence\": 1.0\n}\n\n4. User Input: \"What was that video about neural networks that I watched last week?\"\nOutput:\n{\n    \"action_type\": \"search\",\n    \"search_query\": \"neural networks\",\n    \"confidence\": 0.8\n}\n\n5. User Input: \"Please summarize the video 'Getting Started with Python'\"\nOutput:\n{\n    \"action_type\": \"summarize\",\n    \"video_title\": \"Getting Started with Python\",\n    \"confidence\": 0.9\n}\n\n6. User Input: \"I remember watching a video about startup ideas, can you find it?\"\nOutput:\n{\n    \"action_type\": \"search\",\n    \"search_query\": \"startup ideas\",\n    \"confidence\": 0.7\n}\n\n7. User Input: \"What do you think about this video https://youtube.com/watch?v=13579 and can you add it?\"\nOutput:\n{\n    \"action_type\": \"add\",\n    \"video_url\": \"https://youtube.com/watch?v=13579\",\n    \"confidence\": 0.8\n}\n\n8. User Input: \"What can you you?\"\nOutput:\nOutput:\n{\n    \"action_type\": \"respond\",\n    \"response\": \"I'm a youtube assitant and I can add youtube video to my database, answer questions about a specific videos, or can search by tags, titles, or topics that were discussed in videos. \n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        0,
        860
      ],
      "id": "2d06f943-de84-45f7-a43b-948026bac4ff",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "claude-3-5-haiku-20241022",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        -20,
        240
      ],
      "id": "6206e935-0759-4128-8568-a5a66839219d",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "tx0XfkawlAKVhjKp",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.action_type }}",
                    "rightValue": "add",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "275e8dea-2a5d-4153-a58e-21f7ce644c4d",
                    "leftValue": "={{ $json.output.action_type }}",
                    "rightValue": "respond",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "75fb8c9b-bc0a-4f07-b6fa-2064cfb89941",
                    "leftValue": "={{ $json.output.action_type }}",
                    "rightValue": "summarize",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0a88cea3-d70d-4799-aa6d-1499d0d11c88",
                    "leftValue": "={{ $json.output.action_type }}",
                    "rightValue": "search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        380,
        860
      ],
      "id": "8da89f8a-c69e-4f06-ac99-8304abaa17e9",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"action_type\": \"add|summarize|search\",\n    \"video_url\": \"url or null\",\n    \"video_title\": \"title or null\",\n    \"search_query\": \"search terms or null\",\n    \"confidence\": 0.0,\n  \"response\": \"Test\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        180,
        1080
      ],
      "id": "e2fad743-ef62-46f5-adca-d5991fe6bf18",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "function getYouTubeVideoId(url) {\n  // Handle different URL patterns\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&?/]+)/,\n    /youtube\\.com\\/v\\/([^&?/]+)/,\n    /youtube\\.com\\/shorts\\/([^&?/]+)/\n  ];\n\n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\nreturn { json: { videoId: getYouTubeVideoId($input.first().json.output.video_url) } }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        620,
        620
      ],
      "id": "11d38b9d-7adb-4889-a71f-40c40fd90813",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "\nreturn {transcript: $input.first().json.data.transcript.map(item => item.text).join(\" \") }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        480
      ],
      "id": "578ce7e1-5d2b-48eb-984c-223ed214c8a0",
      "name": "Combine transcript"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.transcript }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert summerizer for youtube video transcripts. \n\nPlease generate:\n- Summary\n- Key Points\n- Actionable tasks\n- Exacted quotes\n\nAlways only return the value as a json object:\n\nEXAMPLE:\n{\n  \"summary\": \"this is the summary\",\n  \"keypoints\": [\"point1\", \"point2\"],\n  \"actionable-tasks\": [\"task1\", \"task2\"],\n  \"extracted-quotes\": [\"quote 1, quote 2\"]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1700,
        420
      ],
      "id": "85ee00b0-a7f9-44ce-b2f2-0eb199a434bb",
      "name": "Summarize agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.transcript }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert in generating tags for youtube videos to classify them, and allow users to search for them later\n\nPlease generate at least 10 tags but as many as you feel required.\n\nExample output:\n{ \"tags\": [ \"tag1\", \"tag2\" ] }\n\nIMPORTANT:\nOnly return the json result, nothing else!"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1620,
        740
      ],
      "id": "72f92041-1082-4e2c-94a5-59c8fa6fb6ac",
      "name": "Tag generator agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{ \"tags\": [ \"tag\"] }"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1800,
        1000
      ],
      "id": "e3f623c4-4c54-4721-a1ae-02333d1e2735",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"summary\": \"this is the summary\",\n  \"keypoints\": [\"point1\", \"point2\"],\n  \"actionable-tasks\": [\"task1\", \"task2\"],\n  \"extracted-quotes\": [\"quote 1, quote 2\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1860,
        240
      ],
      "id": "201b3bdc-59d0-4fc7-a952-360b5793a62a",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1980,
        720
      ],
      "id": "ea53b4c1-2a0f-4259-ac4d-c6a0d69154f2",
      "name": "Merge"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-n8n-Signature",
                "value": "EvtIS^EBVISeie6svB@6ev"
              }
            ]
          }
        }
      },
      "id": "5e4791a8-630c-4c91-ad0d-5921a522a9bb",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        4240,
        1600
      ]
    },
    {
      "parameters": {
        "tableId": "videos",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "video_id",
              "fieldValue": "={{ $('Code').item.json.videoId }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $('Get Transcript and video Info').item.json.data.videoInfo.title }}"
            },
            {
              "fieldId": "channel",
              "fieldValue": "={{ $('Get Transcript and video Info').item.json.data.videoInfo.channelName }}"
            },
            {
              "fieldId": "description",
              "fieldValue": "={{ $('Get Transcript and video Info').item.json.data.videoInfo.description }}"
            },
            {
              "fieldId": "summary",
              "fieldValue": "={{ $('Merge').first().json.output.summary }}"
            },
            {
              "fieldId": "keypoints",
              "fieldValue": "={{ $('Merge').first().json.output.keypoints }}"
            },
            {
              "fieldId": "actionable-tasks",
              "fieldValue": "={{ $('Merge').first().json.output['actionable-tasks'] }}"
            },
            {
              "fieldId": "quotes",
              "fieldValue": "={{ $json.output['extracted-quotes'] }}"
            },
            {
              "fieldId": "transcript",
              "fieldValue": "={{ $('Combine transcript').item.json.transcript }}"
            },
            {
              "fieldId": "tags",
              "fieldValue": "={{ $('Merge').last().json.output.tags }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2200,
        740
      ],
      "id": "24d2a80e-5b9c-4033-ac9b-6e1cb2371363",
      "name": "Add video to supabase",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://wttckgbospxslfaryued.supabase.co/rest/v1/videos?video_id=eq.{{ $json.videoId }}&select=id&limit=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        620
      ],
      "id": "6bbcc20c-5ca1-4820-8123-c4ebf06e6370",
      "name": "Check if video exists",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "69178277-f8ad-4486-b8dc-a768d11403c9",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        520
      ],
      "id": "0dc58b33-cf88-46e0-b845-99f53ed69f0f",
      "name": "If row exists"
    },
    {
      "parameters": {
        "jsCode": "const videoId = $('Code').first().json.videoId;\nreturn {data: `The video with the id ${videoId} is already in the database.`}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        1080
      ],
      "id": "e4bddb36-e9fb-471c-9635-c4b1ac91a9d0",
      "name": "Return text"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2740,
        620
      ],
      "id": "7696d6e9-b4d6-4747-b15e-e11bb79954a0",
      "name": "Insert documents",
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "3b760a95-a045-413c-b199-889aff1c387b",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "ixcgWmmQxnmU6uZx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "953af65b-868c-4a76-a440-5102f2eada82",
              "name": "data",
              "value": "={{ $json.transcript }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2420,
        660
      ],
      "id": "1252fca3-eb42-4d5e-b463-49cf085ab3d3",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "video_id",
                "value": "={{ $('Code').item.json.videoId }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2740,
        880
      ],
      "id": "f9631847-e206-498a-bc53-bc106646ae77",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 100,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2840,
        1100
      ],
      "id": "064fe86e-77c9-4c71-90c1-e7354355bc0a",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "jsCode": "\nconst title = $('Get Transcript and video Info').first().json.data.videoInfo.title;\nconst channel = $('Get Transcript and video Info').first().json.data.videoInfo.channelName;\nreturn {data: `The video '${title}' by ${channel} was added successfully!` };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3160,
        1140
      ],
      "id": "3eea24ec-129e-4d39-9c43-29a51b5eb7f4",
      "name": "Video added successfully"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json.output.response\nreturn {data: `${response}`}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1780
      ],
      "id": "2220463b-96e3-4538-9171-e7db97f9ff19",
      "name": "Return text2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -660,
        1000
      ],
      "id": "16a730cb-97f4-47ca-981d-56412d857432",
      "name": "When chat message received",
      "webhookId": "a023c538-05ea-4324-9c6d-44653d9a44d4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7c3b6c67-035c-4d27-ae67-51a9b68a8609",
              "name": "session_id",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "3838a84f-ec76-4c2f-a29a-5ed2775566d4",
              "name": "query",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -440,
        1000
      ],
      "id": "8f7f1592-426e-4afb-8879-9c2593ba73ab",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "content": "# Summarize \n",
        "height": 543,
        "width": 1470,
        "color": 2
      },
      "id": "c162fc96-faed-4115-949a-a57c769cf93f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1020,
        1980
      ]
    },
    {
      "parameters": {
        "content": "# Add",
        "height": 1263,
        "width": 2970,
        "color": 4
      },
      "id": "154952f8-306c-46dc-b1ae-9d053f6e9576",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        600,
        120
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "videos",
        "filters": {
          "conditions": [
            {
              "keyName": "video_id",
              "keyValue": "={{ $json.videoId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1340,
        2120
      ],
      "id": "6a2ecc19-61fc-4d5e-84a5-945170adc113",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function getYouTubeVideoId(url) {\n  // Handle different URL patterns\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&?/]+)/,\n    /youtube\\.com\\/v\\/([^&?/]+)/,\n    /youtube\\.com\\/shorts\\/([^&?/]+)/\n  ];\n\n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\nreturn { json: { videoId: getYouTubeVideoId($input.first().json.output.video_url) } }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        2120
      ],
      "id": "2835bc83-a49e-4b4d-8c48-c080c7236aef",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b70b8806-7694-4be8-aed3-7d7a1b87d1fb",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "dbb6ae07-9d8d-4327-9763-875d0a3921b1",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "0face230-596b-4b54-b66a-7bd653f565c3",
              "name": "keypoints",
              "value": "={{ $json.keypoints }}",
              "type": "array"
            },
            {
              "id": "39f5b157-b642-4508-a0c8-dcf1b62484b2",
              "name": "actionable-tasks",
              "value": "={{ $json['actionable-tasks'] }}",
              "type": "array"
            },
            {
              "id": "ca2b44ef-d787-4996-90c8-e82cb677471d",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "f6da635e-747d-4e8b-9856-96a837aa3b9d",
              "name": "channel",
              "value": "={{ $json.channel }}",
              "type": "string"
            },
            {
              "id": "35d0f345-cd4c-4aca-b9d8-b040c839bb74",
              "name": "query",
              "value": "={{  $('Edit Fields1').isExecuted ? $('Edit Fields1').item.json.query : $('Prep Input Fields').item.query }}",
              "type": "string"
            },
            {
              "id": "3c935f21-9401-4162-bf1a-53b4ba4cff51",
              "name": "videoId",
              "value": "={{ $json.video_id }}",
              "type": "string"
            },
            {
              "id": "e08c77c9-0905-4038-8628-1083336a2044",
              "name": "session_id",
              "value": "={{ $('Edit Fields1').item.json.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1580,
        2120
      ],
      "id": "f0e7d03e-77c8-4011-ab9a-400146037498",
      "name": "Gather fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert in answering a user question to a video summary. \nThe video is already summerized, and you get the following fields:\n\n- Title\n- Description\n- Summary\n- Key points\n- Tasks\n- Quotes\n\n# The video title is:\n<title>{{ $json.title }}</title>\n\n# The video channel is:\n<channel>{{ $json.channel }}</channel>\n\n# The video description is:\n<description>{{ $json.description }}</description>\n\n# The video Summary is:\n<summary>{{ $json.summary }}</summary>\n\n# Key points:\n<key-points>{{ $json.keypoints }}</key-points>\n\n# Tasks: \n<tasks>{{ $json['actionable-tasks'] }}</tasks>\n\n\nPlease answer the human query:\n<human>{{ $json.query }}</human>\n\n# Expected output:\nRespond directly to the output. Do not mention 'Based on the provided summary'.\n\nExample:\nUser: Can you summarize this videl: http://xxx\nAnswer: The video is discussing ...\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1920,
        2080
      ],
      "id": "d02bc9b5-e4c9-42aa-8f99-188997f4989c",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87f25074-de10-4584-9ac3-417409298c3e",
              "name": "data",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2320,
        2080
      ],
      "id": "678a40c7-5b97-4ad2-9b5f-45b5020e7245",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "toolDescription": "Get the transcript of a video by supplying the video_id",
        "url": "=https://wttckgbospxslfaryued.supabase.co/rest/v1/videos?video_id=eq.{video_id}&select=id&limit=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "video_id",
              "description": "The id of the video",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2160,
        2340
      ],
      "id": "c380787c-e8a9-4c0d-86b3-b57a3bfd08b6",
      "name": "Get Video Transcript",
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Output",
        "height": 383,
        "width": 1010,
        "color": 3
      },
      "id": "ffe4bfca-8893-4471-8894-0449699da364",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3560,
        1480
      ]
    },
    {
      "parameters": {
        "content": "# Search\n",
        "height": 543,
        "width": 1470,
        "color": 7
      },
      "id": "7aef83be-d7a1-4037-adf0-ee6364c0513c",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1020,
        2660
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Use your tool to search for relevant videos and respond to the human.a\nThe search query is: {{ $json.output.search_query }} \n\nAfter the reponse, return the 'video_id' properties from the metadata in a list, prefixed by the Youtube URL.\n\n# Example:\n\nUser: What video is talking about deepseek?\nAnswer: \nThe videos mention deepseek and discuss...\n\n<video_ids>\n<video_id>https://www.youtube.com/watch?v=xyz123</video_id>\n<video_id>https://www.youtube.com/watch?v=12345</video_id>\n</video_ids>",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1240,
        2820
      ],
      "id": "82e01aff-0a8d-4a99-a390-6b870d8ab7dd",
      "name": "Search Agent"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "video_transcript_query",
        "toolDescription": "Search for relevant videos from the vector store  using a search query.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 6,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1460,
        3080
      ],
      "id": "e3fd1bdc-0be5-4dc6-8947-cfe80e5662d6",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f0d1df2-cad9-4777-aa40-06215e4580ec",
              "name": "data",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1780,
        2800
      ],
      "id": "f36abd78-002a-4363-8c02-6f24a5aacc9c",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "videos",
        "filters": {
          "conditions": [
            {
              "keyName": "video_id",
              "keyValue": "={{ $fromAI('videoId') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1300,
        3060
      ],
      "id": "fe467c98-fc9a-488c-b825-230f50a61686",
      "name": "get_video_by_videoId",
      "credentials": {
        "supabaseApi": {
          "id": "nlvpfDPpbZS5Qe3i",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        560,
        2460
      ],
      "id": "f36c520b-ac96-4642-bbfb-de63ec5d7c3e",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "url": "=https://helper-api.dominik-fretz.workers.dev/api/transcript/{{ $('Code').item.json.videoId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1180,
        460
      ],
      "id": "952aacc8-7b80-4a87-ade1-96a93874596f",
      "name": "Get Transcript and video Info",
      "retryOnFail": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pRjHzcrlEkodXNSC",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Get Transcript  HTTP Endpoint\n\nThis is a custom endpoint - for example hosted on cloudfare - to get the video transcript and info (title, description, channel).\n\nThis could probably be done with n8n extensions or sub workflows. ",
        "height": 363,
        "width": 350,
        "color": 7
      },
      "id": "66ff40f7-6a9d-408f-9c78-6b86ccbbd081",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1120,
        660
      ]
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "codewithpassion.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
            "content-length": "207",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "en-AU,en-US;q=0.9,en-GB;q=0.8,en;q=0.7,de;q=0.6",
            "authorization": "Bearer AAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBB",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "2601:4c4:c200:52d0:f124:5717:ff9f:88f2",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "90949feab01552a0-TLH",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://studio.ottomator.ai",
            "priority": "u=1, i",
            "referer": "https://studio.ottomator.ai/",
            "sec-ch-ua": "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "2601:4c4:c200:52d0:f124:5717:ff9f:88f2, 172.69.180.168",
            "x-forwarded-host": "codewithpassion.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-8-86454fd949-ms967",
            "x-is-trusted": "yes",
            "x-real-ip": "2601:4c4:c200:52d0:f124:5717:ff9f:88f2"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "https://www.youtube.com/watch?v=PEI_ePNNfJQ",
            "session_id": "f2891dbc-cad8-473a-939c-813952ca163b",
            "user_id": "google-oauth2|105174866370777381496",
            "request_id": "ff37bc64-3f4a-44e1-880c-f1a0b9cbd557"
          },
          "webhookUrl": "https://codewithpassion.app.n8n.cloud/webhook/9a6c4630-b422-4d42-b894-81ecfe881ffe",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Prep Input Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Input Fields": {
      "main": [
        [
          {
            "node": "Add User Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add User Message to DB": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Tag generator agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Summarize agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Search Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Add AI Message to DB": {
      "main": [
        [
          {
            "node": "Prep Output Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Output Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return text2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Search Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Check if video exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine transcript": {
      "main": [
        [
          {
            "node": "Summarize agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Tag generator agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Tag generator agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Summarize agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Tag generator agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Summarize agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Add video to supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if video exists": {
      "main": [
        [
          {
            "node": "If row exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If row exists": {
      "main": [
        [
          {
            "node": "Return text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Transcript and video Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return text": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add video to supabase": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Insert documents",
            "type": "ai_embedding",
            "index": 0
          },
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Insert documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert documents",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Insert documents": {
      "main": [
        [
          {
            "node": "Video added successfully",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video added successfully": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Add User Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return text2": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Gather fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gather fields": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Transcript": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Search Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search Agent": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_video_by_videoId": {
      "ai_tool": [
        [
          {
            "node": "Search Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get Transcript and video Info": {
      "main": [
        [
          {
            "node": "Combine transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fdfc79cd-52a7-4a22-b7a7-b297b184d31a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6cde8124a36252c1c60e3ea51461905ba5374a11dbae8af8796dac25613a3226"
  },
  "id": "XOOfn39mm8kHQNaK",
  "tags": [
    {
      "name": "studio-test",
      "id": "10iRd2m73tDxwiuk",
      "createdAt": "2025-02-03T14:23:00.708Z",
      "updatedAt": "2025-02-03T14:23:00.708Z"
    }
  ]
}